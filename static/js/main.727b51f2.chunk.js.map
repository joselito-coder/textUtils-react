{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","invertMode","mode","useState","colorDisplay","setColorDisplay","className","href","title","type","id","onClick","document","body","style","backgroundColor","color","setButtonColor","toggleMode","htmlFor","TextForm","wordLength","len","text","split","length","endsWith","setText","textAreaStyle","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","buttonColor","toLowerCase","encryptedText","btoa","console","log","textArea","getElementById","select","navigator","clipboard","writeText","join","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.727b51f2.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    let invertMode = props.mode === 'light' ? 'dark' : 'light';\n    const [colorDisplay, setColorDisplay] = useState('d-none')\n\n    const changeBgRed = () => {\n        document.body.style.backgroundColor = '#381515';\n        document.body.style.color = 'white';\n        props.setButtonColor('danger');\n    }\n\n    const changeBgGreen = () => {\n        document.body.style.backgroundColor = '#051f0c';\n        document.body.style.color = 'white';\n        props.setButtonColor('success');\n    }\n\n    const changeBgBlue = () => {\n        document.body.style.backgroundColor = '#001d3a';\n        document.body.style.color = 'white';\n        props.setButtonColor('primary');\n    }\n\n    const toggleDisplay = () => {\n        if (colorDisplay == 'd-block') {\n            setColorDisplay('d-none');\n        }\n        else {\n            setColorDisplay('d-block');\n        }\n    }\n\n    const handleToggle = () => {\n        props.toggleMode();\n        toggleDisplay();\n    }\n\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                {/* <Link className=\"navbar-brand\" href=\"#\">{props.title}</Link> */}\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <a className=\"nav-link\" to=\"/about\">{props.aboutText}</a>\n                        </li> */}\n                    </ul>\n\n                    <div className={`color-container me-5 ${colorDisplay}`} >\n                        <span className=\"me-3\">Color Theme</span>\n                        <button onClick={changeBgRed} className=\"badge border-0 mx-2 rounded-pill bg-danger\">R</button>\n                        <button onClick={changeBgGreen} className=\"badge border-0 mx-2 rounded-pill bg-success\">G</button>\n                        <button onClick={changeBgBlue} className=\"badge border-0 mx-2 rounded-pill bg-primary\">B</button>\n                    </div>\n\n                    <div className={`form-check form-switch text-${invertMode}`}>\n                        <input className=\"form-check-input\" onClick={handleToggle} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{`Enable ${invertMode} Mode`}</label>\n                    </div>\n\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: \"Insert title here\",\n    aboutText: \"about\"\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function TextForm(props) {\n\n    const wordLength = () => {\n        let len = text.split(' ').length\n        // Check if the text is empty of ends with a space\n        if (text === \"\" || text.endsWith(\" \")) {\n            // subtract one from the length\n            len -= 1;\n        }\n        return len;\n    }\n\n    const handleUpClick = () => {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"The text has been converted to Uppercase!\", 'success');\n    }\n\n    // function to handle if a change occurs in the textarea\n    // this is important as it enables the user to input text into the textarea\n    const handleOnChange = (event) => {\n        setText(event.target.value);\n    }\n\n    // Function used to converte the text to lowercase\n    const handleLoClick = () => {\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"The text has been converted to Lowercase!\", 'success');\n\n    }\n\n    // This function encrypts a plaintext into base64 encoded string\n    const handleEnClick = () => {\n        // Encode the plaintext using window.btoa() function\n        if (!text == \"\") {\n            let encryptedText = btoa(text)\n            console.log(\"I am working\")\n            // Update the text with the encrypted text\n            setText(`Encrypted Text: ${encryptedText}`)\n            props.showAlert(\"The text has been encrypted!\", 'success');\n        }\n    }\n\n    const handleClClick = () => {\n        setText(\"\");\n        props.showAlert(\"The text was cleared!\", 'success');\n    }\n\n    const handleCopy = () => {\n        let textArea = document.getElementById('myBox');\n        textArea.select();\n        navigator.clipboard.writeText(textArea.value);\n        props.showAlert(\"The text was copied to clipboard!\", 'success');\n\n    }\n\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    // State variable to hold text\n    const [text, setText] = useState(\"\");\n\n    const textAreaStyle = {\n        backgroundColor: props.mode === 'dark' ? 'grey' : 'white',\n        color: props.mode === 'dark' ? 'white' : 'black'\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"mb-3\">\n                    <label htmlFor=\"myBox\" className=\"form-label\"><h1>{props.heading}</h1></label>\n                    <textarea className=\"form-control\" value={text} style={textAreaStyle} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\n                    <button onClick={handleUpClick} className={`btn btn-${props.buttonColor} mx-1 my-2`}>Convert to Uppercase</button>\n                    <button onClick={handleLoClick} className={`btn btn-${props.buttonColor} mx-1 my-2`}>Convert to Lowercase</button>\n                    <button onClick={handleEnClick} className={`btn btn-${props.buttonColor} mx-1 my-2`}>Encrypt text</button>\n                    <button onClick={handleClClick} className={`btn btn-${props.buttonColor} mx-1 my-2`}>Clear text</button>\n                    <button onClick={handleCopy} className={`btn btn-${props.buttonColor} mx-1 my-2`}>Copy text</button>\n                    <button onClick={handleExtraSpaces} className={`btn btn-${props.buttonColor} mx-1 my-2`}>Remove extra spaces</button>\n\n                </div>\n            </div>\n\n            <div className=\"container\">\n                <h2>Your Text Summary</h2>\n                <p>{wordLength()} Words and {text.length} Characters</p>\n                <p>{0.008 * wordLength()} Minutes Read</p>\n\n                <div className=\"my-3\"></div>\n                <h3>Preview</h3>\n                <p>{text}</p>\n\n            </div>\n        </>\n    )\n}\n\nTextForm.propTypes = {\n    heading: PropTypes.string.isRequired,\n\n}\n\nTextForm.defaultProps = {\n    heading: \"Enter heading here\"\n}","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word) => {\n        let lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div>\n            <div className={`alert alert-${props.alert.type}`} role=\"alert\">\n                {capitalize(props.alert.type)} : {props.alert.message}\n            </div>\n        </div>\n    )\n}\n\nexport default Alert\n","// import logo from './logo.svg';\nimport './App.css';\nimport AboutUs from './components/AboutUs';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  // state variable used for setting various dark modes\n  const [mode, setMode] = useState('light');\n\n  // State variables for alert component\n  const [alert, setAlert] = useState(null)\n\n  // State variable for keeping track of the button color that shall be used\n  const [buttonColor, setButtonColor] = useState('primary');\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#001d3a';\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode has been enabled\", 'success')\n      document.title = \"TextUtils - dark mode\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black'\n      showAlert(\"Light mode has been enabled\", 'success');\n      document.title = \"TextUtils - light mode\";\n    }\n\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar setButtonColor={setButtonColor} title=\"TextUtils\" aboutText=\"about\" toggleMode={toggleMode} mode={mode} />\n      <Alert alert={alert} />\n\n      {/* <Switch> */}\n      {/* <Route path=\"/about\"> */}\n      {/* <AboutUs />\n          </Route> */}\n\n      {/* <Route path=\"/\"> */}\n      <TextForm buttonColor={buttonColor} showAlert={showAlert} heading=\"Enter the text to be analyzed\" mode={mode} />\n      {/* </Route> */}\n      {/* </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}